{"ast":null,"code":"var _jsxFileName = \"/home/efraim-andrade/Projects/Goomer/wpm-go/src/components/Main/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport * as S from \"./styles\";\n\nconst Main = ({\n  title = \"WPM GOOOOO\"\n}) => {\n  const {\n    0: count,\n    1: setCount\n  } = useState(60);\n  const {\n    0: playing,\n    1: setPlaying\n  } = useState(false);\n  useEffect(() => {\n    const countdown = setInterval(() => {\n      setCount(count => count > 0 ? count - 1 : 60);\n    }, 1000);\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [playing]);\n  const words = [\"Arrow\", \"Tomato\", \"Star\", \"Wheel\"];\n\n  const shuffleArray = arr => arr.map(a => [Math.random(), a]).sort().map(a => a[1]);\n\n  return __jsx(S.Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(S.Button, {\n    onClick: () => setPlaying(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Iniciar\"), __jsx(S.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"CONTAGEM REGRESSIVA: \", count), __jsx(S.TextBox, {\n    type: \"text\",\n    onFocus: () => setPlaying(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), shuffleArray(words).map(word => __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, word)));\n};\n\nexport default Main;","map":{"version":3,"sources":["/home/efraim-andrade/Projects/Goomer/wpm-go/src/components/Main/index.tsx"],"names":["React","useEffect","useState","S","Main","title","count","setCount","playing","setPlaying","countdown","setInterval","clearInterval","words","shuffleArray","arr","map","a","Math","random","sort","word"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG;AAAV,CAAD,KAA8B;AACzC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAGC,WAAW,CAAC,MAAM;AAClCJ,MAAAA,QAAQ,CAAED,KAAD,IAAYA,KAAK,GAAG,CAAR,GAAYA,KAAK,GAAG,CAApB,GAAwB,EAArC,CAAR;AACD,KAF4B,EAE1B,IAF0B,CAA7B;AAIA,WAAO,MAAM;AACXM,MAAAA,aAAa,CAACF,SAAD,CAAb;AACD,KAFD;AAGD,GARQ,EAQN,CAACF,OAAD,CARM,CAAT;AAUA,QAAMK,KAAK,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,OAA5B,CAAd;;AAEA,QAAMC,YAAY,GAAIC,GAAD,IACnBA,GAAG,CACAC,GADH,CACQC,CAAD,IAAO,CAACC,IAAI,CAACC,MAAL,EAAD,EAAgBF,CAAhB,CADd,EAEGG,IAFH,GAGGJ,GAHH,CAGQC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAHf,CADF;;AAMA,SACE,MAAC,CAAD,CAAG,SAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,CAAD,CAAG,MAAH;AAAU,IAAA,OAAO,EAAE,MAAMR,UAAU,CAAC,IAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,MAAC,CAAD,CAAG,KAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA+BH,KAA/B,CAFF,EAIE,MAAC,CAAD,CAAG,OAAH;AAAW,IAAA,IAAI,EAAC,MAAhB;AAAuB,IAAA,OAAO,EAAE,MAAMG,UAAU,CAAC,IAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAMGK,YAAY,CAACD,KAAD,CAAZ,CAAoBG,GAApB,CAAyBK,IAAD,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,IAAJ,CADD,CANH,CADF;AAYD,CAlCD;;AAoCA,eAAejB,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport * as S from \"./styles\";\n\nconst Main = ({ title = \"WPM GOOOOO\" }) => {\n  const [count, setCount] = useState(60);\n  const [playing, setPlaying] = useState(false);\n\n  useEffect(() => {\n    const countdown = setInterval(() => {\n      setCount((count) => (count > 0 ? count - 1 : 60));\n    }, 1000);\n\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [playing]);\n\n  const words = [\"Arrow\", \"Tomato\", \"Star\", \"Wheel\"];\n\n  const shuffleArray = (arr: Array<string>) =>\n    arr\n      .map((a) => [Math.random(), a])\n      .sort()\n      .map((a) => a[1]);\n\n  return (\n    <S.Container>\n      <S.Button onClick={() => setPlaying(true)}>Iniciar</S.Button>\n      <S.Title>CONTAGEM REGRESSIVA: {count}</S.Title>\n\n      <S.TextBox type=\"text\" onFocus={() => setPlaying(true)} />\n\n      {shuffleArray(words).map((word) => (\n        <p>{word}</p>\n      ))}\n    </S.Container>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}